{"version":3,"sources":["hooks/useFarmsWithBalance.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","hooks/useTokenBalance.ts","hooks/useAllEarnings.ts","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/CakeStats2.tsx","hooks/useTokenBalance2.ts","views/Home/components/TwitterCard.tsx","views/Home/Home.tsx"],"names":["useFarmsWithBalance","useState","farmsWithBalances","setFarmsWithBalances","account","useWallet","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","fetchBalances","CardValue","value","decimals","fontSize","prefix","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","CakeHarvestBalance","earningsSum","TranslateString","useI18n","color","style","lineHeight","CakeWalletBalance","cakeBalance","useTokenBalance","tokenAddress","setBalance","ethereum","getTokenBalance","res","fetchBalance","useAllEarnings","balances","fetchAllBalances","StyledFarmStakingCard","styled","Card","Block","div","CardImage","img","Label","theme","colors","textSubtle","FarmedStakingCard","setPendingTx","farmsWithBalance","getBalanceNumber","getCakeAddress","cake2Balance","getCakeAddress2","usePriceCakeBusd","toNumber","reduce","accum","earning","pow","balancesWithValue","filter","balanceType","onReward","useAllHarvest","farmWithBalance","useCallback","size","mb","src","alt","width","height","StyledCakeStats","Row","CakeStats","totalSupply","slowRefresh","setTotalSupply","cakeContract","getContract","cakeABI","methods","call","supply","fetchTotalSupply","useTotalSupply","burnedBalance","balanceOf","bal","useBurnedBalance","farms","useFarms","eggPrice","circSupply","minus","cakeSupply","times","eggPerBlock","StyledLinkExternal","LinkExternal","text","primary","href","CakeStats2","useTotalSupply2","useBurnedBalance2","StyledTwitterCard","TwitterCard","dataSource","sourceType","screenName","options","chrome","Hero","mediaQueries","lg","Cards","BaseLayout","sm","Home","Page","as","FarmStakingCard"],"mappings":"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","file":"static/js/14.96016822.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingEgg',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n  prefix?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px', prefix }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold fontSize={fontSize}>\n      {prefix}{countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport CardValue from './CardValue'\n\nconst CakeHarvestBalance = ({earningsSum}) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={earningsSum} />\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardValue from './CardValue'\n\nconst CakeWalletBalance = ({ cakeBalance }) => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={cakeBalance} fontSize=\"24px\" />\n}\n\nexport default CakeWalletBalance\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account }: { account: string } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingEgg',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\nimport { usePriceCakeBusd } from '../../../state/hooks'\nimport useTokenBalance from '../../../hooks/useTokenBalance'\nimport { getCakeAddress, getCakeAddress2 } from '../../../utils/addressHelpers'\nimport useAllEarnings from '../../../hooks/useAllEarnings'\nimport { getBalanceNumber } from '../../../utils/formatBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/egg/2a.png');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 25px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 10px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const cakeBalance = getBalanceNumber(useTokenBalance(getCakeAddress()))\n    const cake2Balance = getBalanceNumber(useTokenBalance(getCakeAddress2()))\n  const eggPrice = usePriceCakeBusd().toNumber()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(549876543222, ' Balances ')}\n        </Heading>\n        <CardImage src=\"/images/egg/2.png\" alt=\"cake logo\" width={64} height={64} />\n        <Block>\n          <Label>{TranslateString(5987651234543244, ' Earned Flock')}</Label>\n          <CakeHarvestBalance earningsSum={earningsSum}/>\n          \n        </Block>\n        <Block>\n                  <Label>{TranslateString(598765446, 'Goose Wallet ')}</Label>\n          <CakeWalletBalance cakeBalance={cake2Balance} />\n          <Label>{TranslateString(598765446, 'Flock Wallet ')}</Label>\n          <CakeWalletBalance cakeBalance={cakeBalance} />\n        </Block>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text, LinkExternal } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms, usePriceCakeBusd } from '../../../state/hooks'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const farms = useFarms();\n  const eggPrice = usePriceCakeBusd();\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\n  const cakeSupply = getBalanceNumber(circSupply);\n  const marketCap = eggPrice.times(circSupply);\n\n  let eggPerBlock = 0;\n  if(farms && farms[0] && farms[0].eggPerBlock){\n    eggPerBlock = new BigNumber(farms[0].eggPerBlock).div(new BigNumber(10).pow(18)).toNumber();\n  }\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(53498765643124, 'Flock Stats ')}\n        </Heading>\n        <Row>\n        <StyledLinkExternal href='https://bscscan.com/token/0xF38D4b3C5CC42eDF9b8a49CACd90E3C9c75D1978'> Contract Address </StyledLinkExternal>\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total Minted')}</Text>\n          {totalSupply && <CardValue fontSize=\"14px\" value={getBalanceNumber(totalSupply)} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total Burned')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10004, 'Circulating Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport { Card, CardBody, Heading, Text, LinkExternal } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply2, useBurnedBalance2 } from 'hooks/useTokenBalance2'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress2 } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms, usePriceCakeBusd } from '../../../state/hooks'\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats2 = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply2()\n  const burnedBalance = useBurnedBalance2(getCakeAddress2())\n  const farms = useFarms();\n  const eggPrice = usePriceCakeBusd();\n  const circSupply = totalSupply ? totalSupply.minus(burnedBalance) : new BigNumber(0);\n  const cakeSupply = getBalanceNumber(circSupply);\n  const marketCap = eggPrice.times(circSupply);\n\n  let eggPerBlock = 0;\n  if(farms && farms[0] && farms[0].eggPerBlock){\n    eggPerBlock = new BigNumber(farms[0].eggPerBlock).div(new BigNumber(10).pow(18)).toNumber();\n  }\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(53498765643124, 'Goose Stats ')}\n        </Heading>\n                <Row>\n        <StyledLinkExternal href='https://bscscan.com/token/0x19020C5130793d97E9Acc85c7701262A9b774Fec'> Contract Address </StyledLinkExternal>\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total Minted')}</Text>\n          {totalSupply && <CardValue fontSize=\"14px\" value={getBalanceNumber(totalSupply)} decimals={0} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total Burned')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} decimals={0} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(10004, 'Circulating Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} decimals={0} />}\n        </Row>\n\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats2\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json' // TODO\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress2 } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance2 = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply2 = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress2())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance2 = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const cakeContract = getContract(cakeABI, getCakeAddress2())\n      const bal = await cakeContract.methods.balanceOf('0x000000000000000000000000000000000000dEaD').call()\n      setBalance(new BigNumber(bal))\n    }\n\n    fetchBalance()\n  }, [tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance2\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport BigNumber from 'bignumber.js/bignumber'\nimport styled from 'styled-components'\nimport { Timeline } from 'react-twitter-widgets'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\nimport { useFarms } from '../../../state/hooks'\n\nconst StyledTwitterCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst TwitterCard = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledTwitterCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\">\n          {TranslateString(10003, 'Announcements')}\n        </Heading>\n        <Timeline\n          dataSource={{\n            sourceType: 'profile',\n            screenName: 'Goose_Swap'\n          }}\n          options={{\n            height: '600',\n            chrome: \"noheader, nofooter\",\n            width: \"400\"\n          }}\n        />\n      </CardBody>\n    </StyledTwitterCard>\n  )\n}\n\nexport default TwitterCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from './components/FarmStakingCard'\nimport LotteryCard from './components/LotteryCard'\nimport CakeStats from './components/CakeStats'\nimport CakeStats2 from './components/CakeStats2'\nimport TotalValueLockedCard from './components/TotalValueLockedCard'\nimport TwitterCard from './components/TwitterCard'\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('/images/egg/3.png');\n  background-repeat: no-repeat;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/egg/3.png'), url('/images/egg/3b.png');\n    background-position: left center, right center;\n    height: 165px;\n    padding-top: 0;\n  }\n`\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 48px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <Hero>\n        <Heading as=\"h1\" size=\"xl\" mb=\"15px\" color=\"secondary\">\n          {TranslateString(5775612443600, 'Yield Farm and DeFi development platform')}\n        </Heading>\n        <Text>{TranslateString(57876543800, 'Multi asset yield farm in development.')}</Text>\n      </Hero>\n      <div>\n        <Cards>\n          <CakeStats2 />\n                    <CakeStats />\n          <FarmStakingCard />\n          <TwitterCard/>\n\n\n        </Cards>\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}