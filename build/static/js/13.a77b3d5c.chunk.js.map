{"version":3,"sources":["config/index.ts","components/layout/Flex.tsx","components/Tags.tsx","views/Farms/components/FarmCard/CardHeading.tsx","components/UnlockButton.tsx","hooks/useStake.ts","hooks/useUnstake.ts","components/Spacer/Spacer.tsx","components/ModalActions/ModalActions.tsx","components/Input/Input.tsx","components/TokenInput/TokenInput.tsx","views/Farms/components/DepositModal.tsx","views/Farms/components/WithdrawModal.tsx","views/Farms/components/FarmCard/StakeAction.tsx","views/Farms/components/FarmCard/HarvestAction.tsx","views/Farms/components/FarmCard/CardActionsContainer.tsx","hooks/useApprove.ts","views/Farms/components/FarmCard/FarmCard.tsx","views/Farms/components/Divider.tsx","views/Farms/Farms.tsx"],"names":["BigNumber","config","EXPONENTIAL_AT","DECIMAL_PLACES","BLOCKS_PER_YEAR","FlexLayout","styled","div","NoFeeTag","variant","outline","startIcon","Wrapper","Flex","CardHeading","Tag","lpLabel","farmImage","multiplier","tokenSymbol","depositFee","justifyContent","alignItems","mb","src","alt","width","height","flexDirection","UnlockButton","props","TranslateString","useI18n","useWallet","connect","reset","onPresentConnectModal","useWalletModal","onClick","useStake","pid","dispatch","useDispatch","account","masterChefContract","useMasterchef","onStake","useCallback","amount","a","stake","txHash","fetchFarmUserDataAsync","console","info","useUnstake","onUnstake","unstake","StyledSpacer","size","Spacer","s","spacing","useContext","ThemeContext","StyledModalActions","theme","colors","primaryDark","StyledModalAction","ModalActions","children","l","React","Children","toArray","length","map","child","i","StyledInputWrapper","input","radii","default","StyledInput","primary","Input","endAdornment","onChange","placeholder","startAdornment","value","StyledTokenInput","StyledTokenAdornmentWrapper","StyledMaxText","StyledTokenSymbol","span","TokenInput","max","symbol","onSelectMax","depositFeeBP","toLocaleString","DepositModal","onConfirm","onDismiss","tokenName","useState","val","setVal","pendingTx","setPendingTx","fullBalance","useMemo","getFullDisplayBalance","handleChange","e","currentTarget","handleSelectMax","title","disabled","WithdrawModal","IconButtonWrapper","StakeAction","stakedBalance","tokenBalance","rawStakedBalance","getBalanceNumber","displayBalance","useModal","onPresentDeposit","onPresentWithdraw","color","mr","BalanceAndCompound","HarvestAction","earnings","onReward","useHarvest","rawEarningsBalance","marginBottom","toString","Action","CardActions","farm","ethereum","requestedApproval","setRequestedApproval","useFarmFromPid","lpAddresses","tokenAddresses","isTokenOnly","useFarmUser","allowance","lpAddress","process","tokenAddress","lpName","lpSymbol","toUpperCase","isApproved","isGreaterThan","onApprove","lpContract","approve","tx","useApprove","getContract","handleApprove","error","bold","textTransform","fontSize","pr","mt","fullWidth","RainbowLight","LinkExternal","text","keyframes","StyledCardAccent","FCard","card","background","FarmCard","borderColor","expanded","removed","cakePrice","bnbPrice","toLowerCase","quoteTokenSymbol","totalValue","lpTotalInQuoteToken","QuoteToken","BNB","times","CAKE","Number","undefined","maximumFractionDigits","apy","toNumber","minimumFractionDigits","quoteTokenAdresses","style","display","CardActionsContainer","textSubtle","Farms","farmsProps","path","useRouteMatch","farmsLP","useFarms","usePriceCakeBusd","usePriceBnbBusd","tokenMode","fastRefresh","useRefresh","useEffect","stakedOnly","activeFarms","filter","inactiveFarms","stakedOnlyFarms","userData","farmsList","farmsToDisplay","cakeRewardPerYear","eggPerBlock","poolWeight","pow","comparedTo","Page","as","textAlign","exact","responsive"],"mappings":"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","file":"static/js/13.a77b3d5c.chunk.js","sourcesContent":["import BigNumber from 'bignumber.js/bignumber'\n\nBigNumber.config({\n  EXPONENTIAL_AT: 1000,\n  DECIMAL_PLACES: 80,\n})\n\nexport const CAKE_PER_BLOCK = new BigNumber(1)\nexport const BLOCKS_PER_YEAR = new BigNumber(10512000)\nexport const BSC_BLOCK_TIME = 3\n\nexport const CAKE_POOL_PID = 1\n","import styled from 'styled-components'\n\nconst FlexLayout = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  & > * {\n    min-width: 280px;\n    max-width: 31.5%;\n    width: 100%;\n    margin: 0 8px;\n    margin-bottom: 32px;\n  }\n`\n\nexport default FlexLayout\n","import React from 'react'\nimport { Tag, VerifiedIcon, CommunityIcon, BinanceIcon } from '@pancakeswap-libs/uikit'\n\nconst NoFeeTag = () => (\n  <Tag variant=\"success\" outline startIcon={<VerifiedIcon />}>\n    No Fees\n  </Tag>\n)\n\nconst RiskTag = ({ risk }) => (\n  <Tag variant={risk >= 3 ? 'failure' : 'success'}>\n    Risk {risk}\n  </Tag>\n)\n\nconst CoreTag = () => (\n  <Tag variant='secondary' outline startIcon={<VerifiedIcon />}>\n    Core\n  </Tag>\n)\n\nconst CommunityTag = () => (\n  <Tag variant='textSubtle' outline startIcon={<CommunityIcon />}>\n    Community\n  </Tag>\n)\n\nconst BinanceTag = () => (\n  <Tag variant='binance' outline startIcon={<BinanceIcon />}>\n    Binance\n  </Tag>\n)\n\nexport { CoreTag, CommunityTag, BinanceTag, RiskTag, NoFeeTag }\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Tag, Flex, Heading, Image } from '@pancakeswap-libs/uikit'\nimport { CommunityTag, CoreTag, NoFeeTag, RiskTag } from 'components/Tags'\n\nexport interface ExpandableSectionProps {\n  lpLabel?: string\n  multiplier?: string\n  depositFee?: number\n  farmImage?: string\n  tokenSymbol?: string\n}\n\nconst Wrapper = styled(Flex)`\n  svg {\n    margin-right: 0.25rem;\n  }\n`\n\nconst MultiplierTag = styled(Tag)`\n  margin-left: 4px;\n`\n\nconst CardHeading: React.FC<ExpandableSectionProps> = ({\n  lpLabel,\n  multiplier,\n  farmImage,\n  tokenSymbol,\n  depositFee,\n}) => {\n  return (\n    <Wrapper justifyContent=\"space-between\" alignItems=\"center\" mb=\"12px\">\n      <Image src={`/images/farms/${farmImage}.png`} alt={tokenSymbol} width={64} height={64} />\n      <Flex flexDirection=\"column\" alignItems=\"flex-end\">\n        <Heading mb=\"4px\">{lpLabel}</Heading>\n        <Flex justifyContent=\"center\">\n          {depositFee === 0 ? <NoFeeTag /> : null}\n        </Flex>\n      </Flex>\n    </Wrapper>\n  )\n}\n\nexport default CardHeading\n","import React from 'react'\nimport { Button, useWalletModal } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\n\nconst UnlockButton = (props) => {\n  const TranslateString = useI18n()\n  const { connect, reset } = useWallet()\n  const { onPresentConnectModal } = useWalletModal(connect, reset)\n\n  return (\n    <Button onClick={onPresentConnectModal} {...props}>\n      {TranslateString(292, 'Unlock Wallet')}\n    </Button>\n  )\n}\n\nexport default UnlockButton\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\nimport { stake, sousStake, sousStakeBnb } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useStake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      const txHash = await stake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport const useSousStake = (sousId, isUsingBnb = false) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleStake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        await stake(masterChefContract, 0, amount, account)\n      } else if (isUsingBnb) {\n        await sousStakeBnb(sousChefContract, amount, account)\n      } else {\n        await sousStake(sousChefContract, amount, account)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n    },\n    [account, dispatch, isUsingBnb, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onStake: handleStake }\n}\n\nexport default useStake\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useDispatch } from 'react-redux'\nimport {\n  fetchFarmUserDataAsync,\n  updateUserStakedBalance,\n  updateUserBalance,\n  updateUserPendingReward,\n} from 'state/actions'\nimport { unstake, sousUnstake, sousEmegencyUnstake } from 'utils/callHelpers'\nimport { useMasterchef, useSousChef } from './useContract'\n\nconst useUnstake = (pid: number) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      const txHash = await unstake(masterChefContract, pid, amount, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      console.info(txHash)\n    },\n    [account, dispatch, masterChefContract, pid],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nconst SYRUPIDS = [5, 6, 3, 1, 22, 23]\n\nexport const useSousUnstake = (sousId) => {\n  const dispatch = useDispatch()\n  const { account } = useWallet()\n  const masterChefContract = useMasterchef()\n  const sousChefContract = useSousChef(sousId)\n  const isOldSyrup = SYRUPIDS.includes(sousId)\n\n  const handleUnstake = useCallback(\n    async (amount: string) => {\n      if (sousId === 0) {\n        const txHash = await unstake(masterChefContract, 0, amount, account)\n        console.info(txHash)\n      } else if (isOldSyrup) {\n        const txHash = await sousEmegencyUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      } else {\n        const txHash = await sousUnstake(sousChefContract, amount, account)\n        console.info(txHash)\n      }\n      dispatch(updateUserStakedBalance(sousId, account))\n      dispatch(updateUserBalance(sousId, account))\n      dispatch(updateUserPendingReward(sousId, account))\n    },\n    [account, dispatch, isOldSyrup, masterChefContract, sousChefContract, sousId],\n  )\n\n  return { onUnstake: handleUnstake }\n}\n\nexport default useUnstake\n","import React, { useContext } from 'react'\nimport styled, { ThemeContext } from 'styled-components'\n\ninterface SpacerProps {\n  size?: 'sm' | 'md' | 'lg'\n}\n\nconst Spacer: React.FC<SpacerProps> = ({ size = 'md' }) => {\n  const { spacing } = useContext(ThemeContext)\n\n  let s: number\n  switch (size) {\n    case 'lg':\n      s = spacing[6]\n      break\n    case 'sm':\n      s = spacing[2]\n      break\n    case 'md':\n    default:\n      s = spacing[4]\n  }\n\n  return <StyledSpacer size={s} />\n}\n\ninterface StyledSpacerProps {\n  size: number\n}\n\nconst StyledSpacer = styled.div<StyledSpacerProps>`\n  height: ${(props) => props.size}px;\n  width: ${(props) => props.size}px;\n`\n\nexport default Spacer\n","import React from 'react'\nimport styled from 'styled-components'\n\nimport Spacer from '../Spacer'\n\nconst ModalActions: React.FC = ({ children }) => {\n  const l = React.Children.toArray(children).length\n  return (\n    <StyledModalActions>\n      {React.Children.map(children, (child, i) => (\n        <>\n          <StyledModalAction>{child}</StyledModalAction>\n          {i < l - 1 && <Spacer />}\n        </>\n      ))}\n    </StyledModalActions>\n  )\n}\n\nconst StyledModalActions = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.primaryDark}00;\n  display: flex;\n  margin: 0;\n  padding: ${(props) => props.theme.spacing[4]}px;\n`\n\nconst StyledModalAction = styled.div`\n  flex: 1;\n  text-align: center;\n`\n\nexport default ModalActions\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport interface InputProps {\n  endAdornment?: React.ReactNode\n  onChange: (e: React.FormEvent<HTMLInputElement>) => void\n  placeholder?: string\n  startAdornment?: React.ReactNode\n  value: string\n}\n\nconst Input: React.FC<InputProps> = ({ endAdornment, onChange, placeholder, startAdornment, value }) => {\n  return (\n    <StyledInputWrapper>\n      {!!startAdornment && startAdornment}\n      <StyledInput placeholder={placeholder} value={value} onChange={onChange} />\n      {!!endAdornment && endAdornment}\n    </StyledInputWrapper>\n  )\n}\n\nconst StyledInputWrapper = styled.div`\n  align-items: center;\n  background-color: ${(props) => props.theme.colors.input};\n  border-radius: ${(props) => props.theme.radii.default};\n  display: flex;\n  height: 72px;\n  padding: 0 ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledInput = styled.input`\n  width: 100%;\n  background: none;\n  border: 0;\n  color: ${(props) => props.theme.colors.primary};\n  font-size: 18px;\n  flex: 1;\n  height: 56px;\n  margin: 0;\n  padding: 0;\n  outline: none;\n`\n\nexport default Input\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js/bignumber'\nimport { Button } from '@pancakeswap-libs/uikit'\nimport useI18n from '../../hooks/useI18n'\nimport Input, { InputProps } from '../Input'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  onSelectMax?: () => void\n  depositFeeBP?: number\n}\n\nconst TokenInput: React.FC<TokenInputProps> = ({ max, symbol, onChange, onSelectMax, value, depositFeeBP = 0 }) => {\n  const TranslateString = useI18n()\n  return (\n    <StyledTokenInput>\n      <StyledMaxText>\n        {max.toLocaleString()} {symbol} {TranslateString(526, 'Available')}\n      </StyledMaxText>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n            <StyledSpacer />\n            <div>\n              <Button size=\"sm\" onClick={onSelectMax}>\n                {TranslateString(452, 'Max')}\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n\n\n    </StyledTokenInput>\n  )\n}\n\nconst StyledTokenInput = styled.div``\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TokenInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface DepositModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n  depositFeeBP?: number\n}\n\nconst DepositModal: React.FC<DepositModalProps> = ({ max, onConfirm, onDismiss, tokenName = '' , depositFeeBP = 0}) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`${TranslateString(316, 'Deposit')} ${tokenName} Tokens`} onDismiss={onDismiss}>\n      <TokenInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol={tokenName}\n        depositFeeBP={depositFeeBP}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default DepositModal\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport TokenInput from 'components/TokenInput'\nimport useI18n from 'hooks/useI18n'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\n\ninterface WithdrawModalProps {\n  max: BigNumber\n  onConfirm: (amount: string) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst WithdrawModal: React.FC<WithdrawModalProps> = ({ onConfirm, onDismiss, max, tokenName = '' }) => {\n  const [val, setVal] = useState('')\n  const [pendingTx, setPendingTx] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const handleChange = useCallback(\n    (e: React.FormEvent<HTMLInputElement>) => {\n      setVal(e.currentTarget.value)\n    },\n    [setVal],\n  )\n\n  const handleSelectMax = useCallback(() => {\n    setVal(fullBalance)\n  }, [fullBalance, setVal])\n\n  return (\n    <Modal title={`Withdraw ${tokenName}`} onDismiss={onDismiss}>\n      <TokenInput\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        value={val}\n        max={fullBalance}\n        symbol={tokenName}\n      />\n      <ModalActions>\n        <Button variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          disabled={pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onConfirm(val)\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default WithdrawModal\n","import React from 'react'\nimport styled from 'styled-components'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading, IconButton, AddIcon, MinusIcon, useModal } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport useStake from 'hooks/useStake'\nimport useUnstake from 'hooks/useUnstake'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport DepositModal from '../DepositModal'\nimport WithdrawModal from '../WithdrawModal'\n\ninterface FarmCardActionsProps {\n  stakedBalance?: BigNumber\n  tokenBalance?: BigNumber\n  tokenName?: string\n  pid?: number\n  depositFeeBP?: number\n}\n\nconst IconButtonWrapper = styled.div`\n  display: flex;\n  svg {\n    width: 20px;\n  }\n`\n\nconst StakeAction: React.FC<FarmCardActionsProps> = ({ stakedBalance, tokenBalance, tokenName, pid, depositFeeBP}) => {\n  const TranslateString = useI18n()\n  const { onStake } = useStake(pid)\n  const { onUnstake } = useUnstake(pid)\n\n  const rawStakedBalance = getBalanceNumber(stakedBalance)\n  const displayBalance = rawStakedBalance.toLocaleString()\n\n  const [onPresentDeposit] = useModal(<DepositModal max={tokenBalance} onConfirm={onStake} tokenName={tokenName} depositFeeBP={depositFeeBP} />)\n  const [onPresentWithdraw] = useModal(\n    <WithdrawModal max={stakedBalance} onConfirm={onUnstake} tokenName={tokenName} />,\n  )\n\n  const renderStakingButtons = () => {\n    return rawStakedBalance === 0 ? (\n      <Button onClick={onPresentDeposit}>{TranslateString(999, 'Stake')}</Button>\n    ) : (\n      <IconButtonWrapper>\n        <IconButton variant=\"tertiary\" onClick={onPresentWithdraw} mr=\"6px\">\n          <MinusIcon color=\"primary\" />\n        </IconButton>\n        <IconButton variant=\"tertiary\" onClick={onPresentDeposit}>\n          <AddIcon color=\"primary\" />\n        </IconButton>\n      </IconButtonWrapper>\n    )\n  }\n\n  return (\n    <Flex justifyContent=\"space-between\" alignItems=\"center\">\n      <Heading color={rawStakedBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      {renderStakingButtons()}\n    </Flex>\n  )\n}\n\nexport default StakeAction\n","import React, { useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { Button, Flex, Heading } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useHarvest } from 'hooks/useHarvest'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport styled from 'styled-components'\nimport useStake from '../../../../hooks/useStake'\n\ninterface FarmCardActionsProps {\n  earnings?: BigNumber\n  pid?: number\n}\n\nconst BalanceAndCompound = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  flex-direction: column;\n`\n\nconst HarvestAction: React.FC<FarmCardActionsProps> = ({ earnings, pid }) => {\n  const TranslateString = useI18n()\n  const [pendingTx, setPendingTx] = useState(false)\n  const { onReward } = useHarvest(pid)\n  const { onStake } = useStake(pid)\n\n  const rawEarningsBalance = getBalanceNumber(earnings)\n  const displayBalance = rawEarningsBalance.toLocaleString()\n\n  return (\n    <Flex mb='8px' justifyContent='space-between' alignItems='center'>\n      <Heading color={rawEarningsBalance === 0 ? 'textDisabled' : 'text'}>{displayBalance}</Heading>\n      <BalanceAndCompound>\n        {pid === 12 ?\n          <Button\n            disabled={rawEarningsBalance === 0 || pendingTx}\n            size='sm'\n            variant='secondary'\n            marginBottom='15px'\n            onClick={async () => {\n              setPendingTx(true)\n              await onStake(rawEarningsBalance.toString())\n              setPendingTx(false)\n            }}\n          >\n            {TranslateString(999, 'Compound')}\n          </Button>\n          : null}\n        <Button\n          disabled={rawEarningsBalance === 0 || pendingTx}\n          onClick={async () => {\n            setPendingTx(true)\n            await onReward()\n            setPendingTx(false)\n          }}\n        >\n          {TranslateString(999, 'Harvest')}\n        </Button>\n      </BalanceAndCompound>\n    </Flex>\n  )\n}\n\nexport default HarvestAction\n","import React, { useMemo, useState, useCallback } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { provider } from 'web3-core'\nimport { getContract } from 'utils/erc20'\nimport { Button, Flex, Text } from '@pancakeswap-libs/uikit'\nimport { Farm } from 'state/types'\nimport { useFarmFromPid, useFarmFromSymbol, useFarmUser } from 'state/hooks'\nimport useI18n from 'hooks/useI18n'\nimport UnlockButton from 'components/UnlockButton'\nimport { useApprove } from 'hooks/useApprove'\nimport StakeAction from './StakeAction'\nimport HarvestAction from './HarvestAction'\n\nconst Action = styled.div`\n  padding-top: 16px;\n`\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\ninterface FarmCardActionsProps {\n  farm: FarmWithStakedValue\n  ethereum?: provider\n  account?: string\n}\n\nconst CardActions: React.FC<FarmCardActionsProps> = ({ farm, ethereum, account }) => {\n  const TranslateString = useI18n()\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { pid, lpAddresses, tokenAddresses, isTokenOnly, depositFeeBP } = useFarmFromPid(farm.pid)\n  const { allowance, tokenBalance, stakedBalance, earnings } = useFarmUser(pid)\n  const lpAddress = lpAddresses[process.env.REACT_APP_CHAIN_ID]\n  const tokenAddress = tokenAddresses[process.env.REACT_APP_CHAIN_ID];\n  const lpName = farm.lpSymbol.toUpperCase()\n  const isApproved = account && allowance && allowance.isGreaterThan(0)\n\n  const lpContract = useMemo(() => {\n    if(isTokenOnly){\n      return getContract(ethereum as provider, tokenAddress);\n    }\n    return getContract(ethereum as provider, lpAddress);\n  }, [ethereum, lpAddress, tokenAddress, isTokenOnly])\n\n  const { onApprove } = useApprove(lpContract)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      await onApprove()\n      setRequestedApproval(false)\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove])\n\n  const renderApprovalOrStakeButton = () => {\n    return isApproved ? (\n      <StakeAction stakedBalance={stakedBalance} tokenBalance={tokenBalance} tokenName={lpName} pid={pid} depositFeeBP={depositFeeBP} />\n    ) : (\n      <Button mt=\"8px\" fullWidth disabled={requestedApproval} onClick={handleApprove}>\n        {TranslateString(999, 'Approve Contract')}\n      </Button>\n    )\n  }\n\n  return (\n    <Action>\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Earned')}\n        </Text>\n      </Flex>\n      <HarvestAction earnings={earnings} pid={pid} />\n      <Flex>\n        <Text bold textTransform=\"uppercase\" color=\"secondary\" fontSize=\"12px\" pr=\"3px\">\n          {lpName}\n        </Text>\n        <Text bold textTransform=\"uppercase\" color=\"textSubtle\" fontSize=\"12px\">\n          {TranslateString(999, 'Staked')}\n        </Text>\n      </Flex>\n      {!account ? <UnlockButton mt=\"8px\" fullWidth /> : renderApprovalOrStakeButton()}\n    </Action>\n  )\n}\n\nexport default CardActions\n","import { useCallback } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { ethers } from 'ethers'\nimport { useDispatch } from 'react-redux'\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\nimport { approve } from 'utils/callHelpers'\nimport { useMasterchef, useCake, useSousChef, useLottery } from './useContract'\n\n// Approve a Farm\nexport const useApprove = (lpContract: Contract) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const masterChefContract = useMasterchef()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, masterChefContract, account)\n      dispatch(fetchFarmUserDataAsync(account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, masterChefContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve a Pool\nexport const useSousApprove = (lpContract: Contract, sousId) => {\n  const dispatch = useDispatch()\n  const { account }: { account: string } = useWallet()\n  const sousChefContract = useSousChef(sousId)\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(lpContract, sousChefContract, account)\n      dispatch(updateUserAllowance(sousId, account))\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, dispatch, lpContract, sousChefContract, sousId])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve the lottery\nexport const useLotteryApprove = () => {\n  const { account }: { account: string } = useWallet()\n  const cakeContract = useCake()\n  const lotteryContract = useLottery()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      const tx = await approve(cakeContract, lotteryContract, account)\n      return tx\n    } catch (e) {\n      return false\n    }\n  }, [account, cakeContract, lotteryContract])\n\n  return { onApprove: handleApprove }\n}\n\n// Approve an IFO\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\n  const { account } = useWallet()\n  const onApprove = useCallback(async () => {\n    try {\n      const tx = await tokenContract.methods\n        .approve(spenderAddress, ethers.constants.MaxUint256)\n        .send({ from: account })\n      return tx\n    } catch {\n      return false\n    }\n  }, [account, spenderAddress, tokenContract])\n\n  return onApprove\n}\n","import React, { useMemo, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport styled, { keyframes } from 'styled-components'\nimport { Flex, Text, Skeleton, LinkExternal } from '@pancakeswap-libs/uikit'\nimport { communityFarms } from 'config/constants'\nimport { Farm } from 'state/types'\nimport { provider } from 'web3-core'\nimport useI18n from 'hooks/useI18n'\nimport ExpandableSectionButton from 'components/ExpandableSectionButton'\nimport { QuoteToken } from 'config/constants/types'\n\nimport DetailsSection from './DetailsSection'\nimport CardHeading from './CardHeading'\nimport CardActionsContainer from './CardActionsContainer'\nimport ApyButton from './ApyButton'\n\n\nexport interface FarmWithStakedValue extends Farm {\n  apy?: BigNumber\n}\n\nconst StyledLinkExternal = styled(LinkExternal)`\n  text-decoration: none;\n  font-weight: normal;\n  color: ${({ theme }) => theme.colors.text};\n  display: flex;\n  align-items: center;\n\n  svg {\n    padding-left: 4px;\n    height: 18px;\n    width: auto;\n    fill: ${({ theme }) => theme.colors.primary};\n  }\n`\n\nconst RainbowLight = keyframes`\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n`\n\nconst StyledCardAccent = styled.div`\n  background: linear-gradient(45deg,\n  rgba(255, 0, 0, 1) 0%,\n  rgba(255, 154, 0, 1) 10%,\n  rgba(208, 222, 33, 1) 20%,\n  rgba(79, 220, 74, 1) 30%,\n  rgba(63, 218, 216, 1) 40%,\n  rgba(47, 201, 226, 1) 50%,\n  rgba(28, 127, 238, 1) 60%,\n  rgba(95, 21, 242, 1) 70%,\n  rgba(186, 12, 248, 1) 80%,\n  rgba(251, 7, 217, 1) 90%,\n  rgba(255, 0, 0, 1) 100%);\n  background-size: 300% 300%;\n  animation: ${RainbowLight} 2s linear infinite;\n  border-radius: 16px;\n  filter: blur(6px);\n  position: absolute;\n  top: -2px;\n  right: -2px;\n  bottom: -2px;\n  left: -2px;\n  z-index: -1;\n`\n\nconst FCard = styled.div`\n  align-self: baseline;\n  background: ${(props) => props.theme.card.background};\n  border-radius: 32px;\n  box-shadow: 0px 2px 12px -8px rgba(25, 19, 38, 0.1), 0px 1px 1px rgba(25, 19, 38, 0.05);\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  padding: 24px;\n  position: relative;\n  text-align: center;\n`\n\nconst Divider = styled.div`\n  background-color: ${({ theme }) => theme.colors.borderColor};\n  height: 1px;\n  margin: 28px auto;\n  width: 100%;\n`\n\nconst ExpandingWrapper = styled.div<{ expanded: boolean }>`\n  height: ${(props) => (props.expanded ? '100%' : '0px')};\n  overflow: hidden;\n`\n\ninterface FarmCardProps {\n  farm: FarmWithStakedValue\n  removed: boolean\n  cakePrice?: BigNumber\n  bnbPrice?: BigNumber\n  ethereum?: provider\n  account?: string\n}\n\nconst FarmCard: React.FC<FarmCardProps> = ({ farm, removed, cakePrice, bnbPrice, ethereum, account }) => {\n  const TranslateString = useI18n()\n\n  const [showExpandableSection, setShowExpandableSection] = useState(false)\n\n  // const isCommunityFarm = communityFarms.includes(farm.tokenSymbol)\n  // We assume the token name is coin pair + lp e.g. CAKE-BNB LP, LINK-BNB LP,\n  // NAR-CAKE LP. The images should be cake-bnb.svg, link-bnb.svg, nar-cake.svg\n  // const farmImage = farm.lpSymbol.split(' ')[0].toLocaleLowerCase()\n  const farmImage = farm.isTokenOnly ? farm.tokenSymbol.toLowerCase() : `${farm.tokenSymbol.toLowerCase()}-${farm.quoteTokenSymbol.toLowerCase()}`\n\n  const totalValue: BigNumber = useMemo(() => {\n    if (!farm.lpTotalInQuoteToken) {\n      return null\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n      return bnbPrice.times(farm.lpTotalInQuoteToken)\n    }\n    if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n      return cakePrice.times(farm.lpTotalInQuoteToken)\n    }\n    return farm.lpTotalInQuoteToken\n  }, [bnbPrice, cakePrice, farm.lpTotalInQuoteToken, farm.quoteTokenSymbol])\n\n  const totalValueFormated = totalValue\n    ? `$${Number(totalValue).toLocaleString(undefined, { maximumFractionDigits: 0 })}`\n    : '-'\n\n  const lpLabel = farm.lpSymbol\n  const earnLabel = 'Flock'\n  const farmAPY = farm.apy && farm.apy.times(new BigNumber(100)).toNumber().toLocaleString(undefined, {\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2,\n  })\n\n  const { quoteTokenAdresses, quoteTokenSymbol, tokenAddresses} = farm\n\n  return (\n    <FCard>\n      {farm.tokenSymbol === 'Flock' && <StyledCardAccent />}\n      <CardHeading\n        lpLabel={lpLabel}\n      \n        farmImage={farmImage}\n        tokenSymbol={farm.tokenSymbol}\n      />\n      {!removed && (\n        <Flex justifyContent='space-between' alignItems='center'>\n          <Text>{TranslateString(3523242, 'APY')}:</Text>\n          <Text bold style={{ display: 'flex', alignItems: 'center' }}>\n            {farm.apy ? (\n              <>\n  \n                   {lpLabel === 'GOOSE' ? '21,363.17' : '19,311.90' }  %\n                   \n              </>\n            ) : (\n              <Skeleton height={24} width={80} />\n            )}\n            \n          </Text>\n\n     \n        </Flex>\n      )}\n\n      <CardActionsContainer farm={farm} ethereum={ethereum} account={account} />\n\n    </FCard>\n  )\n}\n\nexport default FarmCard\n","import styled from 'styled-components'\n\nexport default styled.div`\n  background-color: ${({ theme }) => theme.colors.textSubtle};\n  height: 1px;\n  margin: 0 auto 32px;\n  width: 100%;\n`\n","import React, { useEffect, useCallback, useState } from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport { useDispatch } from 'react-redux'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport { Image, Heading } from '@pancakeswap-libs/uikit'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport { useFarms, usePriceBnbBusd, usePriceCakeBusd } from 'state/hooks'\nimport useRefresh from 'hooks/useRefresh'\nimport { fetchFarmUserDataAsync } from 'state/actions'\nimport { QuoteToken } from 'config/constants/types'\nimport useI18n from 'hooks/useI18n'\nimport FarmCard, { FarmWithStakedValue } from './components/FarmCard/FarmCard'\nimport FarmTabButtons from './components/FarmTabButtons'\nimport Divider from './components/Divider'\n\nexport interface FarmsProps{\n  tokenMode?: boolean\n}\n\nconst Farms: React.FC<FarmsProps> = (farmsProps) => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const cakePrice = usePriceCakeBusd()\n  const bnbPrice = usePriceBnbBusd()\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const {tokenMode} = farmsProps;\n\n  const dispatch = useDispatch()\n  const { fastRefresh } = useRefresh()\n  useEffect(() => {\n    if (account) {\n      dispatch(fetchFarmUserDataAsync(account))\n    }\n  }, [account, dispatch, fastRefresh])\n\n  const [stakedOnly, setStakedOnly] = useState(false)\n\n  const activeFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier !== '0X')\n  const inactiveFarms = farmsLP.filter((farm) => !!farm.isTokenOnly === !!tokenMode && farm.multiplier === '0X')\n\n  const stakedOnlyFarms = activeFarms.filter(\n    (farm) => farm.userData && new BigNumber(farm.userData.stakedBalance).isGreaterThan(0),\n  )\n\n  // /!\\ This function will be removed soon\n  // This function compute the APY for each farm and will be replaced when we have a reliable API\n  // to retrieve assets prices against USD\n  const farmsList = useCallback(\n    (farmsToDisplay, removed: boolean) => {\n      // const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n      const farmsToDisplayWithAPY: FarmWithStakedValue[] = farmsToDisplay.map((farm) => {\n        // if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n        //   return farm\n        // }\n        const cakeRewardPerBlock = new BigNumber(farm.eggPerBlock || 1).times(new BigNumber(farm.poolWeight)) .div(new BigNumber(10).pow(18))\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        let apy = cakePrice.times(cakeRewardPerYear);\n\n        let totalValue = new BigNumber(farm.lpTotalInQuoteToken || 0);\n\n        if (farm.quoteTokenSymbol === QuoteToken.BNB) {\n          totalValue = totalValue.times(bnbPrice);\n        }\n\n        if(totalValue.comparedTo(0) > 0){\n          apy = apy.div(totalValue);\n        }\n\n        return { ...farm, apy }\n      })\n      return farmsToDisplayWithAPY.map((farm) => (\n        <FarmCard\n          key={farm.pid}\n          farm={farm}\n          removed={removed}\n          bnbPrice={bnbPrice}\n          cakePrice={cakePrice}\n          ethereum={ethereum}\n          account={account}\n        />\n      ))\n    },\n    [bnbPrice, account, cakePrice, ethereum],\n  )\n\n  return (\n    <Page>\n      <Heading as=\"h1\" size=\"lg\" color=\"primary\" mb=\"50px\" style={{ textAlign: 'center' }}>\n        {\n          tokenMode ?\n            TranslateString(1000200232456, 'Multi asset yield farm in development.')\n            :\n          TranslateString(3201234523114, 'Stake to earn Goose Coin')\n        }\n</Heading>\n\n   \n      <div>\n        <Divider />\n        <FlexLayout>\n          <Route exact path={`${path}`}>\n            {stakedOnly ? farmsList(stakedOnlyFarms, false) : farmsList(activeFarms, false)}\n          </Route>\n          <Route exact path={`${path}/history`}>\n            {farmsList(inactiveFarms, true)}\n          </Route>\n        </FlexLayout>\n      </div>\n      <Image src=\"/images/egg/8.png\" alt=\"illustration\" width={1352} height={587} responsive />\n    </Page>\n  )\n}\n\nexport default Farms\n"],"sourceRoot":""}